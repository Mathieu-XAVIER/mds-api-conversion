name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Exécuter les tests quotidiennement à 2h du matin
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 80

jobs:
  # Job de validation du code
  lint-and-format:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: |
          if command -v prettier &> /dev/null; then
            npm run format:check || echo "::warning::Prettier non configuré"
          else
            echo "::notice::Prettier non installé - skip formatting check"
          fi

      - name: Run ESLint
        run: |
          if command -v eslint &> /dev/null; then
            npm run lint || echo "::warning::ESLint non configuré"
          else
            echo "::notice::ESLint non installé - skip linting"
          fi

  # Job de tests unitaires et d'intégration
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit || npm test

      - name: Run integration tests
        run: npm run test:integration || echo "::notice::Tests d'intégration non configurés"

      - name: Generate coverage report
        run: npm run test:coverage || npm run test -- --coverage

      - name: Check coverage threshold
        run: |
          COVERAGE=$(npm run test:coverage --silent 2>/dev/null | grep -E "(All files|Statements)" | tail -1 | grep -oE '[0-9]+(\.[0-9]+)?%' | head -1 | sed 's/%//' || echo "0")
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "::error::Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
            exit 1
          fi
          echo "::notice::Coverage ${COVERAGE}% meets threshold ${COVERAGE_THRESHOLD}%"

      - name: Upload coverage to Codecov
        if: matrix.node-version == 18
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

  # Job de tests de sécurité
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level high
          # Si npm audit échoue avec des vulnérabilités critiques, le job échoue

      - name: Check for outdated packages
        run: |
          npm outdated || echo "::warning::Some packages are outdated"

  # Job de tests end-to-end
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [test]
    services:
      # Si vous utilisez une base de données
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start application
        run: |
          nohup npm start &
          sleep 10
          curl -f http://localhost:3000/ || exit 1
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run E2E tests
        run: |
          # Tests avec curl pour vérifier l'API
          echo "Testing API endpoints..."
          
          # Test health endpoint
          curl -f http://localhost:3000/ || exit 1
          
          # Test conversion endpoint
          curl -f "http://localhost:3000/convert?from=EUR&to=USD&amount=100" || exit 1
          
          # Test TVA endpoint
          curl -f "http://localhost:3000/tva?ht=100&taux=20" || exit 1
          
          # Test remise endpoint
          curl -f "http://localhost:3000/remise?prix=100&pourcentage=10" || exit 1
          
          echo "All E2E tests passed!"

  # Job de build et validation
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          # Si vous avez un script de build
          if npm run build 2>/dev/null; then
            echo "Build completed successfully"
          else
            echo "::notice::No build script found - skipping build step"
          fi

      - name: Validate application structure
        run: |
          echo "Validating application structure..."
          test -f src/app.js || exit 1
          test -d src/services || exit 1
          test -d src/controllers || exit 1
          test -d tests || exit 1
          echo "Application structure is valid"

  # Job de nettoyage
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    steps:
      - name: Clean up artifacts
        run: |
          echo "Cleaning up temporary files and artifacts..."
          # Nettoyage si nécessaire